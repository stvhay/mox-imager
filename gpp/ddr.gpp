#define DEFRET(dest)		TEST_SM_AND_BRANCH SM15 0xffffffff LBL##dest == dest
#define CALL(label,retlabel)	LOAD_SM_VAL SM15 LBL##retlabel & BRANCH label & LABEL retlabel

BRANCH STRT
LABEL RET
DEFRET(R__1)
DEFRET(R__2)
DEFRET(R__3)
DEFRET(R__4)
DEFRET(R__5)
DEFRET(R__6)
DEFRET(R__7)

#ifdef SUPPORT_UART_BAUDRATE_CHANGE

DEFRET(Ru_1)
DEFRET(Ru_2)
DEFRET(Ru_3)
DEFRET(Ru_4)
DEFRET(Ru_5)
DEFRET(Ru_6)
DEFRET(Ru_7)

#endif

BRANCH END

#include "ddr_test.gpp.inc"
#include "ddr3.gpp.inc"
#include "ddr4.gpp.inc"
#include "efuse.gpp.inc"
#ifdef SUPPORT_UART_BAUDRATE_CHANGE
#include "uart.gpp.inc"
#endif

#define branch_if_addrs_dont_mask(addr1,addr2,label)	\
	WRITE addr1 0x0000AAAA				\
	& WRITE addr2 0x55550000			\
	& DELAY 1					\
	& LOAD_SM_ADDR SM0 addr1			\
	& LOAD_SM_ADDR SM1 addr2			\
	& SUB_SM_SM SM0 SM1				\
	& TEST_SM_AND_BRANCH SM0 0xffffffff 0 != label

LABEL STRT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; set DDR mode according to OTP (if not present or error reading, try both modes ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; read ECC row 42
LOAD_SM_VAL SM0 42
LOAD_SM_VAL SM1 39
LOAD_SM_VAL SM2 7
CALL(eFus, R__1)

; if not read correctly, try both DDR modes
TEST_SM_AND_BRANCH SM0 0xffffffff 0 != BOTH
; if row is not locked, try both DDR modes
TEST_SM_AND_BRANCH SM1 0xffffffff 1 != BOTH

; store high word in SM14 (DDR training code may use low SMs)
MOV_SM_SM SM14 SM3
; if burned board version is >= 30, do DDR4 training, otherwise DDR3
TEST_SM_AND_BRANCH SM14 0x007f0000 0x001e0000 >= do4

; do DDR3 training
CALL(DDR3, R__2)
; if burned RAM size is 512 MB, end
TEST_SM_AND_BRANCH SM14 0x01000000 0x01000000 != END
; else set 1024 MB (DDR3 board don't support more)
WRITE 0xC0000200 0x000E0001
DELAY 1
BRANCH END

; do DDR4 traning
LABEL do4
CALL(DDR4, R__3)
; if burned RAM size is less then 4 GB, skip setting 4 GB, otherwise set 4 GB and end
TEST_SM_AND_BRANCH SM14 0x03000000 0x03000000 < skp4
WRITE 0xC0000200 0x00100001
WRITE 0xC0000220 0x16021739
DELAY 1
BRANCH END
LABEL skp4
; if burned RAM size is less then 2 GB, end, otherwise set 2 GB and end
TEST_SM_AND_BRANCH SM14 0x03000000 0x02000000 < END
WRITE 0xC0000200 0x000F0001
WRITE 0xC0000220 0x05020639
DELAY 1
BRANCH END

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; try both DDR modes (first DDR3, then DDR4) ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

LABEL BOTH

; first try to initialize in DDR3 mode
CALL(DDR3, R__4)

; test if we see RAM contents in DDR3 mode
CALL(TEST, R__5)

; if yes, try finding RAM size for DDR3
TEST_SM_AND_BRANCH SM0 1 1 == SIZ3

; else try DDR4 mode
CALL(DDR4, R__6)

; test if we see RAM contents in DDR4 mode
CALL(TEST, R__7)

; if not, something is very wrong
TEST_SM_AND_BRANCH SM0 1 1 != END

; otherwise we're trying to determine RAM size for DDR4
;    addr       1 GB       2 GB       4 GB
; 0xC0000200 0x000E0001 0x000F0001 0x00100001
; 0xC0000220 0x05020635 0x05020639 0x16021739

; try 2 GB
WRITE 0xC0000200 0x000F0001
WRITE 0xC0000220 0x05020639
DELAY 1

; if 2 GB works, try 4 GB
branch_if_addrs_dont_mask(0x60000000, 0x60004000, TRY4)
; otherwise go back to 1 GB
WRITE 0xC0000200 0x000E0001
WRITE 0xC0000220 0x05020635
DELAY 1
BRANCH END

; try 4 GB
LABEL TRY4
WRITE 0xC0000200 0x00100001
WRITE 0xC0000220 0x16021739
DELAY 1

; if 4 GB works, END
branch_if_addrs_dont_mask(0x60000000, 0x70000000, END)
; otherwise go back to 2 GB
WRITE 0xC0000200 0x000F0001
WRITE 0xC0000220 0x05020639
DELAY 1
BRANCH END

; code for finding RAM size for DDR3
; current setting is 512 MB, max is 1024 MB, so only one try
LABEL SIZ3

; try 1 GB
WRITE 0xC0000200 0x000E0001
DELAY 1

; if 1 GB works, END
branch_if_addrs_dont_mask(0x60000000, 0x80000000, END)
; otherwise go back to 512 MB
WRITE 0xC0000200 0x000D0001

LABEL END

#ifdef SUPPORT_UART_BAUDRATE_CHANGE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; The following code handles baudrate change when booting over UART ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; skip if we aren't booting via UART
TEST_ADDR_AND_BRANCH UART_STS 0x200 0x200 != uEND

; disable UART RX interrupt (which is handled by BootROM)
AND_VAL UART_CTRL 0xFFFFFFEF

; receive at most 32 bytes on UART
LOAD_SM_VAL SM0 0x20
LOAD_SM_VAL SM1 0x1FFFF000
CALL(UArx, Ru_1)

; we are expecting preamble or baudrate change request, exactly 4 bytes
TEST_SM_AND_BRANCH SM0 0xFFFFFFFF 4 != uTXB

MOV_SM_SM SM14 SM0

LOAD_SM_VAL SM0 0x1FFFF000
CALL(SERv, Ru_2)

; baud rate change starts with "baud"
TEST_SM_AND_BRANCH SM0 0xFFFFFFFF 0x64756162 == uCHG

; we received something different (possibly preamble). Retrasmit via
; loopback so that BootROM can handle this.
LABEL uTXB

; enable loopback
OR_VAL 0xC0013804 0x80000000
OR_VAL UART_CTRL 0x00001000

; trasmit
MOV_SM_SM SM0 SM14
LOAD_SM_VAL SM1 0x1FFFF000
CALL(UAtx, Ru_7)

;DELAY 1000000
; disable loopback
AND_VAL UART_CTRL 0xFFFFEFFF
AND_VAL 0xC0013804 0x7FFFFFFF

BRANCH uEND

LABEL uCHG

; to compute baudrate generator parameters the host will need to know
; TBG-A-P clock frequency:
;   1. XTAL frequency (from divider of counter 2, set by BootROM)
LOAD_SM_ADDR SM0 0xC0008320
RSHIFT_SM_VAL SM0 8
STORE_SM_ADDR SM0 0x1FFFF000
;   2. TBG_A_FBDIV value
LOAD_SM_ADDR SM0 0xC0013204
RSHIFT_SM_VAL SM0 2
STORE_SM_ADDR SM0 0x1FFFF004
;   3. TBG_A_REFDIV value
LOAD_SM_ADDR SM0 0xC0013220
STORE_SM_ADDR SM0 0x1FFFF008
RSHIFT_SM_VAL SM0 8
AND_SM_VAL SM0 0x1
STORE_SM_ADDR SM0 0x1FFFF00C
;   4. TBG_A_VCODIV_SEL_DIFF value
LOAD_SM_ADDR SM0 0xC0013230
RSHIFT_SM_VAL SM0 1
AND_SM_VAL SM0 0x7
STORE_SM_ADDR SM0 0x1FFFF010

; trasmit these 5 bytes over UART
LOAD_SM_VAL SM0 0x5
LOAD_SM_VAL SM1 0x1FFFF000
CALL(UAtx, Ru_3)

; receive UART parameters
LOAD_SM_VAL SM0 0x6
LOAD_SM_VAL SM1 0x1FFFF000
CALL(UArx, Ru_4)

; a delay is required here
DELAY 100000

; we are expecting 6 bytes
TEST_SM_AND_BRANCH SM0 0xFFFFFFFF 6 != uEND

LOAD_SM_VAL SM0 0x1FFFF000
CALL(SERv, Ru_5)

AND_SM_VAL SM0 0x3FF
MOV_SM_SM SM14 SM0

LOAD_SM_VAL SM0 0x1FFFF008
CALL(SERv, Ru_6)

; finally do the procedure for baudrate change
OR_VAL 0xC0013804 0x80000000
OR_VAL UART_CTRL 0x00001000
OR_VAL UART_CTRL 0x0000C000
DELAY 100
WAIT_FOR_BIT_SET UART_STS 0x40 100
OR_VAL UART_CLK_CTRL 0x200000
OR_VAL UART_CLK_CTRL 0x80000
AND_VAL UART_CLK_CTRL 0xFFFC0000
LOAD_SM_ADDR SM1 UART_CLK_CTRL
OR_SM_VAL SM1 0x9000
OR_SM_SM SM1 SM14
STORE_SM_ADDR SM1 UART_CLK_CTRL
STORE_SM_ADDR SM0 UART_SAMPLER
AND_VAL UART_CLK_CTRL 0xFFDFFFFF
AND_VAL UART_CTRL 0xFFFFEFFF
AND_VAL UART_CTRL 0xFFFF3FFF
AND_VAL 0xC0013804 0x7FFFFFFF
DELAY 1000

; reenable UART RX interrupt
LABEL uEND
OR_VAL UART_CTRL 0x10
#endif
