#define DEFRET(dest)		TEST_SM_AND_BRANCH SM15 0xffffffff LBL##dest == dest
#define CALL(label,retlabel)	LOAD_SM_VAL SM15 LBL##retlabel & BRANCH label & LABEL retlabel

BRANCH STRT
LABEL RET
DEFRET(R__1)
DEFRET(R__2)
DEFRET(R__3)
DEFRET(R__4)
BRANCH END

#include "ddr_test.gpp.inc"
#include "ddr3.gpp.inc"
#include "ddr4.gpp.inc"

#define branch_if_addrs_dont_mask(addr1,addr2,label)	\
	WRITE addr1 0x0000AAAA				\
	& WRITE addr2 0x55550000			\
	& DELAY 1					\
	& LOAD_SM_ADDR SM0 addr1			\
	& LOAD_SM_ADDR SM1 addr2			\
	& SUB_SM_SM SM0 SM1				\
	& TEST_SM_AND_BRANCH SM0 0xffffffff 0 != label

LABEL STRT

; first try to initialize in DDR3 mode
CALL(DDR3, R__1)

; test if we see RAM contents in DDR3 mode
CALL(TEST, R__2)

; if yes, try finding RAM size for DDR3
TEST_SM_AND_BRANCH SM0 1 1 == SIZ3

; else try DDR4 mode
CALL(DDR4, R__3)

; test if we see RAM contents in DDR4 mode
CALL(TEST, R__4)

; if not, something is very wrong
TEST_SM_AND_BRANCH SM0 1 1 != END

; otherwise we're trying to determine RAM size for DDR4
;    addr       1 GB       2 GB       4 GB
; 0xC0000200 0x000E0001 0x000F0001 0x00100001
; 0xC0000220 0x05020635 0x05020639 0x16021739

; try 2 GB
WRITE 0xC0000200 0x000F0001
WRITE 0xC0000220 0x05020639
DELAY 1

; if 2 GB works, try 4 GB
branch_if_addrs_dont_mask(0x60000000, 0x60004000, TRY4)
; otherwise go back to 1 GB
WRITE 0xC0000200 0x000E0001
WRITE 0xC0000220 0x05020635
DELAY 1
BRANCH END

; try 4 GB
LABEL TRY4
WRITE 0xC0000200 0x00100001
WRITE 0xC0000220 0x16021739
DELAY 1

; if 4 GB works, END
branch_if_addrs_dont_mask(0x60000000, 0x70000000, END)
; otherwise go back to 2 GB
WRITE 0xC0000200 0x000F0001
WRITE 0xC0000220 0x05020639
DELAY 1
BRANCH END

; code for finding RAM size for DDR3
; current setting is 512 MB, max is 1024 MB, so only one try
LABEL SIZ3

; try 1 GB
WRITE 0xC0000200 0x000E0001
DELAY 1

; if 1 GB works, END
branch_if_addrs_dont_mask(0x60000000, 0x80000000, END)
; otherwise go back to 512 MB
WRITE 0xC0000200 0x000D0001

LABEL END
